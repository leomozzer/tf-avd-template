name: "Terraform Apply"
description: "Performs the terraform apply"

inputs:
  AZURE_CLI_VERSION:
    description: "Azure cli version"
    required: false
    default: "latest"
  WORKING_DIR:
    description: "working directory"
    required: true
  AZURE_SP:
    description: "Credentials of the Azure SP"
    required: true
  STORAGE_ACCOUNT_NAME:
    description: "Name of the storage account"
    required: true
  STAGE:
    description: "Deployment stage"
    required: true
  CREATE_OUTPUT:
    description: "Create output file"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.AZURE_SP }}

    - uses: hashicorp/setup-terraform@v2

    - name: Copy ${{ inputs.STAGE }} live plan from Storage
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ inputs.AZURE_CLI_VERSION }}
        inlineScript: |
          az storage blob download \
          --file terraform-live.tar \
          --name terraform-live-${{ inputs.STAGE }}-${{ github.run_number }}.tar \
          --account-name ${{ inputs.STORAGE_ACCOUNT_NAME }} \
          --container-name plans

    - name: Extract files
      uses: a7ul/tar-action@v1.1.0
      id: extract-terraform-live
      with:
        command: x
        cwd: ./
        files: terraform-live.tar

    - name: Copy ${{ inputs.STAGE }} modules from Storage
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ inputs.AZURE_CLI_VERSION }}
        inlineScript: |
          az storage blob download \
          --file terraform-modules.tar \
          --name terraform-modules-${{ inputs.STAGE }}-${{ github.run_number }}.tar \
          --account-name ${{ inputs.STORAGE_ACCOUNT_NAME }} \
          --container-name plans

    - name: Extract files
      uses: a7ul/tar-action@v1.1.0
      id: extract-terraform-modules
      with:
        command: x
        cwd: ./
        files: terraform-modules.tar

    - name: Show directory
      shell: bash
      run: |
        ls -ltr

    - name: Terraform Apply
      shell: bash
      run: terraform apply -lock-timeout=10m "${{ inputs.STAGE }}.plan"
      working-directory: ./

    - name: Save Terraform Outputs as JSON
      # Ensure you are in the correct directory where your main.tf is located for terraform output
      # working-directory: ./path/to/your/terraform/root # Uncomment/adjust if your Terraform code is not at the repo root
      run: |
        # Capture the clean JSON output into a shell variable
        # This command only captures the standard output of 'terraform output -json'.
        # The runner's logging will still be visible in the GitHub Actions UI logs,
        # but it won't be written to your JSON file.
        TERRAFORM_JSON_OUTPUT=$(terraform output -json)

        # Write the content of the variable (which now contains only the clean JSON) to the file
        echo "$TERRAFORM_JSON_OUTPUT" > "${{ inputs.STAGE }}.json"

        echo "Terraform outputs saved to ${{ inputs.STAGE }}.json"
      shell: bash

    - name: Save output ${{ inputs.STAGE }}.json
      uses: azure/CLI@v1
      if: ${{ inputs.CREATE_OUTPUT }}
      with:
        azcliversion: ${{ inputs.AZURE_CLI_VERSION }}
        inlineScript: |
          az storage blob upload \
          --file ${{ inputs.STAGE }}.json \
          --name ${{ inputs.STAGE }}.json \
          --account-name ${{ inputs.STORAGE_ACCOUNT_NAME }} \
          --container-name output \
          --overwrite
