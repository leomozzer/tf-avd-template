name: '3 - Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      # Define an input for the 'stage'
      stage:
        description: 'Select the deployment stage'
        required: true # Make it required so the user must select one
        default: 'dev' # Set 'dev' as the default option
        type: choice
        options:       # Provide the list of available options
          - dev
          - test
          - prod
  workflow_run:
    workflows: ["2 - Terraform Tests"] # Name of the producer workflow
    types:
      - completed # Trigger when the producer workflow completes

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  STA_RESOURCE_GROUP_NAME: rg-lsoavdstac
  RESOURCE_GROUP_LOCATION: westeurope

jobs:

  tfsec:
    name: "Aquasec TfSec"
    strategy:
      matrix:
        stage: ["${{ inputs.stage }}"]
    runs-on: ubuntu-latest
    concurrency: ${{ matrix.stage }}

    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: TfSec in azure-virtual-desktop module
        run: |
          docker pull aquasec/tfsec:latest
          docker run --rm -v "$(pwd)/infra/modules/azure-virtual-desktop:/src" aquasec/tfsec ./src
          docker rmi "aquasec/tfsec:latest" -f | true

      - name: TfSec in monitoring module
        run: |
          docker pull aquasec/tfsec:latest
          docker run --rm -v "$(pwd)/infra/modules/monitoring:/src" aquasec/tfsec ./src
          docker rmi "aquasec/tfsec:latest" -f | true
          
      - name: TfSec in monitoring module
        run: |
          docker pull aquasec/tfsec:latest
          docker run --rm -v "$(pwd)/infra/modules/session-hosts:/src" aquasec/tfsec ./src
          docker rmi "aquasec/tfsec:latest" -f | true

      - name: TfSec on terraform files
        run: |
          docker pull aquasec/tfsec:latest
          docker run --rm -v "$(pwd)/infra/environment/${{ matrix.stage }}:/src" aquasec/tfsec ./src
          docker rmi "aquasec/tfsec:latest" -f | true

  plan:
    name: "Plan Job"
    needs: [tfsec]
    strategy:
      matrix:
        stage: ["${{ inputs.stage }}"]
    runs-on: ubuntu-latest
    concurrency: ${{ matrix.stage }}
    steps:
    - uses: actions/checkout@v3

    - uses: "./.github/actions/terraform-plan"
      with:
        WORKING_DIR: "./infra/environment/${{ matrix.stage }}"
        AZURE_SP: ${{ secrets.AZURE_SP }}
        RESOURCE_GROUP_NAME: "${{ env.STA_RESOURCE_GROUP_NAME }}-${{ matrix.stage }}"
        STORAGE_ACCOUNT_NAME: "lsoavdstac"
        CONTAINER_NAME: "states"
        STATE_FILE: "${{ matrix.stage }}.tfstate"
        STAGE: "${{ matrix.stage }}"

  apply:
    name: "Apply Job"
    needs: [plan]
    strategy:
      matrix:
        stage: ["${{ inputs.stage }}"]
    runs-on: ubuntu-latest
    environment: ${{ matrix.stage }}
    defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./terraform-live
    steps:
    - uses: actions/checkout@v3

    - uses: "./.github/actions/terraform-apply"
      with:
        WORKING_DIR: "./infra/environment/${{ matrix.stage }}"
        AZURE_SP: ${{ secrets.AZURE_SP }}
        STORAGE_ACCOUNT_NAME: "lsoavdstac"
        STAGE: "${{ matrix.stage }}"
        CREATE_OUTPUT: "true"